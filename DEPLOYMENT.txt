================================================================================
REDDYFIT V2 - DEPLOYMENT GUIDE
================================================================================
Version: 2.0.0.1
Date: October 23, 2025
Status: Production-Ready

================================================================================
PRE-DEPLOYMENT CHECKLIST
================================================================================

Environment Setup:
☐ Create .env.local from .env.example
☐ Add valid GEMINI_API_KEY from https://aistudio.google.com/app/apikey
☐ Verify Firebase configuration in firebase.ts
☐ Test all environment variables load correctly

Code Quality:
☐ All tests passing (npm run test -- --run)
☐ No TypeScript errors (npm run build)
☐ No console errors in development
☐ All features tested manually

Performance:
☐ Run Lighthouse audit (target: >90)
☐ Check bundle size (target: <500KB gzipped)
☐ Test on slow 3G network
☐ Verify images are optimized

Security:
☐ Review Firebase Security Rules
☐ Verify no API keys in code
☐ Check CORS settings
☐ Audit dependencies for vulnerabilities (npm audit)

Mobile:
☐ Test on iOS Safari
☐ Test on Android Chrome
☐ Verify PWA install prompt works
☐ Test offline functionality
☐ Check safe area insets on notched devices

================================================================================
DEPLOYMENT OPTIONS
================================================================================

OPTION 1: NETLIFY (RECOMMENDED FOR PWA)
----------------------------------------

1. Build the Application:
   npm run build

2. Install Netlify CLI:
   npm install -g netlify-cli

3. Login to Netlify:
   netlify login

4. Deploy:
   netlify deploy --prod

5. Configure Environment Variables in Netlify Dashboard:
   - GEMINI_API_KEY
   - (Firebase vars are in code, but could be moved to env)

6. Custom Domain (optional):
   - Add custom domain in Netlify dashboard
   - Configure DNS records
   - Enable HTTPS (automatic)

Netlify Configuration (_redirects):
   /*  /index.html  200

Benefits:
- Automatic HTTPS
- CDN distribution
- Continuous deployment from Git
- Preview deployments
- Easy rollbacks


OPTION 2: VERCEL
-----------------

1. Install Vercel CLI:
   npm install -g vercel

2. Deploy:
   vercel --prod

3. Set Environment Variables:
   vercel env add GEMINI_API_KEY

Benefits:
- Excellent performance
- Great DX with Git integration
- Preview deployments
- Edge functions support


OPTION 3: FIREBASE HOSTING
---------------------------

1. Install Firebase CLI:
   npm install -g firebase-tools

2. Login:
   firebase login

3. Initialize:
   firebase init hosting

4. Build:
   npm run build

5. Deploy:
   firebase deploy --only hosting

Firebase Hosting Configuration (firebase.json):
{
  "hosting": {
    "public": "dist",
    "ignore": ["firebase.json", "**/.*", "**/node_modules/**"],
    "rewrites": [
      {
        "source": "**",
        "destination": "/index.html"
      }
    ],
    "headers": [
      {
        "source": "/service-worker.js",
        "headers": [
          {
            "key": "Cache-Control",
            "value": "no-cache"
          }
        ]
      }
    ]
  }
}

Benefits:
- Already using Firebase
- Free tier generous
- Fast global CDN
- Preview channels


OPTION 4: CLOUDFLARE PAGES
---------------------------

1. Connect Git repository
2. Build command: npm run build
3. Output directory: dist
4. Deploy

Benefits:
- Excellent performance
- Free tier
- Workers for serverless functions
- Analytics included

================================================================================
BUILD CONFIGURATION
================================================================================

Production Build:
  Command: npm run build
  Output: dist/
  Vite optimizations: 
    - Code splitting
    - Tree shaking
    - Minification
    - Asset optimization

Build Output Should Include:
  ✓ index.html
  ✓ assets/index-[hash].js
  ✓ assets/index-[hash].css
  ✓ favicon.svg
  ✓ manifest.json
  ✓ service-worker.js (from PWA plugin)

Verify Build:
  1. npm run build
  2. npm run preview
  3. Test all features locally
  4. Check Network tab for errors

================================================================================
ENVIRONMENT VARIABLES
================================================================================

Required:
  GEMINI_API_KEY=your_key_here

Optional (if moved from firebase.ts):
  VITE_FIREBASE_API_KEY=
  VITE_FIREBASE_AUTH_DOMAIN=
  VITE_FIREBASE_PROJECT_ID=
  VITE_FIREBASE_STORAGE_BUCKET=
  VITE_FIREBASE_MESSAGING_SENDER_ID=
  VITE_FIREBASE_APP_ID=
  VITE_FIREBASE_MEASUREMENT_ID=

Note: Vite requires VITE_ prefix for client-side env vars

================================================================================
FIREBASE CONFIGURATION
================================================================================

Firestore Security Rules (Update in Firebase Console):

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User profiles
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
      
      // Meal logs
      match /mealLogs/{logId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Workout plans (shared)
    match /workoutPlans/{planId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        resource.data.userId == request.auth.uid;
    }
    
    // Community exercises (public read, auth write)
    match /communityExercises/{exerciseId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        resource.data.contributorId == request.auth.uid;
    }
  }
}

Storage Security Rules:

rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /users/{userId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId
        && request.resource.size < 10 * 1024 * 1024  // 10MB limit
        && request.resource.contentType.matches('image/.*');
    }
  }
}

================================================================================
POST-DEPLOYMENT VERIFICATION
================================================================================

Functionality Tests:
☐ User can sign up
☐ User can sign in
☐ Dashboard loads correctly
☐ Meal upload works (camera + gallery)
☐ AI analysis returns results
☐ Gym analyzer processes videos
☐ Chat responds to messages
☐ Voice input works
☐ Exercise library loads
☐ Settings save correctly
☐ User can sign out

PWA Tests:
☐ Install prompt appears
☐ App installs on home screen
☐ App works offline (basic features)
☐ Service worker updates properly
☐ Icons display correctly
☐ Splash screen shows (iOS/Android)

Performance Tests:
☐ First load < 3 seconds
☐ Subsequent loads < 1 second
☐ No memory leaks (check DevTools)
☐ Animations smooth (60fps)
☐ No layout shifts

Mobile Tests:
☐ Touch targets work (44px minimum)
☐ Navigation smooth
☐ Forms work on mobile keyboards
☐ Camera access works
☐ File upload works
☐ Scrolling smooth
☐ No horizontal scroll
☐ Safe areas respected on notched devices

================================================================================
MONITORING & MAINTENANCE
================================================================================

Setup Monitoring (Recommended):
1. Google Analytics or Plausible for usage tracking
2. Sentry for error tracking
3. Firebase Performance Monitoring
4. Lighthouse CI for continuous performance checks

Regular Maintenance:
□ Weekly: Check error logs
□ Weekly: Review user feedback
□ Monthly: Update dependencies (npm update)
□ Monthly: Review Firebase usage/costs
□ Quarterly: Security audit
□ Quarterly: Performance optimization

================================================================================
ROLLBACK PROCEDURE
================================================================================

If Issues After Deployment:

Netlify:
  1. Go to Deploys tab
  2. Find previous working deployment
  3. Click "Publish deploy"

Vercel:
  1. Go to Deployments
  2. Select previous deployment
  3. Click "Promote to Production"

Firebase:
  firebase hosting:channel:deploy previous-version
  firebase hosting:clone previous-version:live

Git:
  git revert HEAD
  git push
  Trigger new deployment

================================================================================
DOMAIN & DNS CONFIGURATION
================================================================================

For Custom Domain:

1. Purchase domain (Namecheap, Google Domains, etc.)

2. Configure DNS:
   Type: A
   Name: @
   Value: [Your hosting provider's IP]
   
   Type: CNAME
   Name: www
   Value: [Your hosting provider's domain]

3. Enable HTTPS (automatic on most platforms)

4. Add to Firebase Auth (if using custom domain):
   - Firebase Console > Authentication > Settings
   - Add your domain to authorized domains

5. Update manifest.json start_url to your domain

================================================================================
COST ESTIMATES
================================================================================

Free Tier (Small to Medium Traffic):
  - Netlify: 100GB bandwidth, 300 build minutes
  - Vercel: 100GB bandwidth, unlimited builds
  - Firebase: 10GB storage, 1GB downloads/day
  - Cloudflare: Unlimited bandwidth, builds

Typical Monthly Costs (1000 active users):
  - Hosting: $0 (free tier sufficient)
  - Firebase: $0-25 (Firestore reads/writes)
  - Gemini API: Variable (pay per request)
  
Estimated: $0-50/month for small scale

================================================================================
TROUBLESHOOTING
================================================================================

Build Fails:
  - Check Node version (use LTS)
  - Clear node_modules and reinstall
  - Check for TypeScript errors
  - Verify all env vars set

App Doesn't Load:
  - Check browser console for errors
  - Verify API keys are valid
  - Check Firebase configuration
  - Clear browser cache

PWA Not Installing:
  - HTTPS required (not localhost)
  - Check manifest.json is accessible
  - Verify service worker registered
  - Check browser PWA requirements

Offline Mode Not Working:
  - Service worker may not be activated yet
  - Check service worker in DevTools
  - Verify workbox configuration
  - Test in incognito mode

Performance Issues:
  - Run Lighthouse audit
  - Check bundle size
  - Optimize images
  - Enable compression on server
  - Use CDN for assets

================================================================================
SUPPORT & RESOURCES
================================================================================

Documentation:
  - PROJECT_STATUS.txt - Current project status
  - TEST_SUMMARY.txt - Testing information
  - IMPLEMENTATION_PLAN.md - Full roadmap
  - QUICKSTART.txt - Local development setup

Useful Links:
  - Vite: https://vitejs.dev
  - Firebase: https://firebase.google.com/docs
  - Gemini API: https://ai.google.dev
  - Netlify: https://docs.netlify.com
  - PWA: https://web.dev/progressive-web-apps/

Community:
  - Stack Overflow (tag: vite, firebase, pwa)
  - Firebase Discord
  - Reddit: r/webdev, r/reactjs

================================================================================
FINAL CHECKLIST
================================================================================

Before Going Live:
☑ All tests passing (34/34)
☑ Build succeeds
☑ Environment variables configured
☑ Firebase rules updated
☑ Manual testing complete
☑ Performance acceptable
☑ Mobile tested
☑ PWA works
☑ Monitoring setup
☑ Backup plan ready

You're ready to deploy! 🚀

================================================================================
Questions? Check PROJECT_STATUS.txt or IMPLEMENTATION_PLAN.md
================================================================================
